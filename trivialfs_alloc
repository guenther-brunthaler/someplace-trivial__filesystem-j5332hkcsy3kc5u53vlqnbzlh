#! /bin/sh
HDR_KEY=TrivialFS
HDR_VAL=80a29844-f5e3-11e3-b1c1-b827eb896db5
COMPATIBLE_VERSION=3
ACTUAL_VERSION=3
default_metadata_max_bytes=4096

# Allocates new files within an already-existing TrivialFS filesystem.
#
# Expects the path to a TrivialFS as the first argument, which may either be a
# container file or a block device.
#
# If there are no more arguments, action commands are read from standard
# input, one line per command. Otherwise, the remaining arguments represent
# the action commands.
#
# An action command be specified as one of the following variants:
#
# * "@start_offset_incl+length=pathname"
#
# * "@start_offset_incl..@end_offset_incl=pathname"
#
# * "@start_offset_incl<@end_offset_excl=pathname"
#
# * "@end_offset_excl-length=pathname"
#
# * "+length=pathname"
#
# * "-length=pathname"
#
# The offsets and sizes are specified in bytes, but suffixes like B, kB, KiB,
# MB, MiB etc. are allowed to multiply the values as bytes, kilobytes,
# kibibytes etc. Only SI-units are supported and letter case must be correct.
# Therefore, "MB", "kB" and "KiB" are valid units, but "mb", "KB", "kb" or
# "kiB" are not.
#
# All the variants containing offsets specify an exact location and range size
# for the file, relative to the first byte of the filesystem container.
#
# "+length" allocates the file after the first already-allocated file where
# there is space enough. If there is not enough space anywhere beyond the
# first already-allocated file, it will be allocated at the end of the free
# space before the first allocated file. If there are no allocations yet, the
# command "@$default_metadata_max_bytes+$length" will be used instead, where
# $length is the length specified for the original command.
#
# "-length" allocates the file at the end of the last unused gap within the
# already-allocated space which is large enough. If there are no allocations
# yet, the file is allocated at the end of the container or block device.
#
# Note that pathnames use "/" as directory separators and must be absolute,
# but must not start with a "/". Pathnames starting with a "/" are reserved
# for special pseudo-pathnames which are used by TrivialFS manipulation tools
# for private purposes. Such names will also be suppressed in listings.
#
# trivialfs_alloc version 2016.151
#
# Copyright (c) 2014-2016 Guenther Brunthaler. All rights reserved.
# 
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

set -e

# a9hpguh5ddnq25ycsf7hiq5kj {
dir0=`dirname -- "$0"`; dir0=`readlink -f -- "$dir0"`; test -d "$dir0"
libdir=$dir0/sh; test -d "$libdir"
# } a9hpguh5ddnq25ycsf7hiq5kj 
. "$libdir"/cleanup-37yusympssv3vb63uavsipr7u.sh
. "$libdir"/fsize-4rdwih8qv64bnb5wvizl2l61s.sh
. "$libdir"/parse_bytecount-pgxdf9uct7ch4pzf5e2b4bn9f.sh
. "$libdir"/validate_uint-r29t167e1xmvyk7trebvq0l9y.sh

metadata_backup_file=
dry_run=false
while getopts nb: OPT
do
	case $OPT in
		n) dry_run=true;;
		b) metadata_backup_file=$OPTARG;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

volume=$1; shift
test -n "$volume"
if test -b "$volume"
then
	maxsize=`blockdev --getsize64 "$volume"`
	softmax=false
else
	test -f "$volume"
	maxsize=`fsize "$volume"`
	softmax=true
fi

tmpdir() {
	rm -rf -- "$TD"
}
TD=`mktemp -d -- "${TMPDIR:-/tmp}/${0##*/}".XXXXXXXXXX`
alloc tmpdir

# Parse a "@"-$line and split it.
# Also override $maxsize from a pseudo-entry "/EOF"*.
split_fline() {
	local offset length path
	path=${line#'@'}
	length=${path%%=*}; path=${path#"$length="}
	offset=${length%+*}; length=${length#"$offset"+}
	validate_uint "$offset"
	validate_uint "$length"
	test x"@$offset+$length=$path" = x"$line"
	case $path in
		"/EOF"*)
			if test $offset -lt $maxsize || $softmax
			then
				maxsize=$offset
				softmax=false # May only shrink further.
			fi
	esac
	echo "$offset $length $path"
}

redir5() {
	5>& -
}

redir6() {
	6>& -
}

redir7() {
	7<& -
}

{
	hdr="$HDR_KEY=$HDR_VAL"; hlen=${#hdr}
	echo "$hdr" > "$TD/needed"
	dd bs=`expr $hlen + 1` count=1 of="$TD/header" 2> /dev/null
	unset hdr hlen
	if cmp -s "$TD"/needed "$TD/header"
	then
		rm "$TD"/needed
	else
		die "'$volume' does not look like a TrivialFS filesystem!"
	fi
	exec 5>> "$TD/header"; alloc '=' redir5
	dst="$TD/files"; exec 6> "$dst"; alloc redir6
	LNO=2
	while IFS= read -r line
	do
		if test $LNO = 2
		then
			cv=${line#COMPATIBLE_VERSION=}
			if
				test x"$cv" != x"$line" \
				&& expr x"$cv" : x'[1-9][0-9]*$' > /dev/null
			then
				unset cv
			else
				die "Unsupported TrivialFS version!"
			fi
		fi
		LNO=`expr $LNO + 1`
		if expr x"$line" : x'[^=]\{1,\}=' > /dev/null
		then
			case $line in
				"@"*) split_fline >& 6;;
				*) printf '%s\n' "$line" >& 5
			esac
		else
			printf '%s\n' "$line" > "$TD"/footer
			break
		fi
	done
	release '='
} < "$volume"
test -s "$TD"/footer || die "Incomplete TrivialFS metadata area!"

swap_src_dst() {
	local t
	t=$src; src=$dst; dst=$t
}

src="${dst}_other"; swap_src_dst
LC_NUMERIC=C LC_COLLATE=C sort -n "$src" > "$dst"; swap_src_dst

# Complain about $cmd.
syntax_error() {
	die "Command '$cmd' has invalid syntax!"
}

# Verify $1 == $prefix as part of $cmd and that $offset and $length are uints.
chk_prefix() {
	validate_uint "$offset" \
	&& validate_uint "$length" \
	&& test x"$1" = x"$prefix" \
	|| syntax_error
}

overlap() {
	die "Command '$cmd' ($length bytes @ $offset)" \
		"would overlap with existing TrivialFS file" \
		"'$fpath' ($flength bytes @ $foffset)!"
}

process_cmd() {
	local offset foffset length flength path fpath end fend
	local prefix not_yet_eof cmd
	cmd=$1; path=${cmd#*=}
	test x"$path" != x"$cmd" || die "Missing pathname in command '$cmd'!"
	if test x"${path#/}" != x"$path"
	then
		die "Path name '$path' must be relative to the root of" \
			"the TrivialFS and must not begin with a '/'!"
	fi
	prefix=${cmd%"=$path"}
	offset=${prefix#'@'}
	if test x"$offset" != x"$prefix"
	then
		while IFS=' ' read -r foffset flength fpath
		do
			if test x"$path" = x"$fpath"
			then
				die "Cannot allocate '$path' which already" \
					"exists at byte offset $foffset with" \
					"a length of $flength bytes!"
			fi
		done < "$src"
		case $offset in
			*"+"*)
				# * "@start_offset_incl+length"
				length=${offset#*+}; offset=${offset%+*}
				chk_prefix "@$offset+$length"
				;;
			*".."*)
				# * "@start_offset_incl..@end_offset_incl"
				length=${offset#*..}; offset=${offset%..*}
				length=${length#'@'}
				chk_prefix "@$offset..@$length"
				test $length -ge $offset \
					|| die "$length < $offset in '$cmd'!"
				length=`expr $length + 1 - $offset`
				;;
			*"<"*)
				# * "@start_offset_incl<@end_offset_excl"
				length=${offset#*<}; offset=${offset%<*}
				length=${length#'@'}
				chk_prefix "@$offset<@$length"
				test $length -ge $offset \
					|| die "$length < $offset in '$cmd'!"
				length=`expr $length - $offset || :`
				;;
			*"-"*)
				# * "@end_offset_excl-length"
				length=${offset#*-}; offset=${offset%-*}
				chk_prefix "@$offset-$length"
				test $offset -ge $length \
					|| die "$length > $offset in '$cmd'!"
				offset=`expr $offset - $length || :`
				;;
			*) die syntax_error
		esac
		end=`expr $offset + $length || :`
		if test $end -gt $maxsize
		then
			die "Command '$cmd' ($length bytes @ $offset)" \
				"would exceed the filesystem size of" \
				"$maxsize bytes!"
		fi
		exec 7< "$src"; alloc '=' redir7
		exec 5> "$dst"; alloc redir5
		not_yet_eof=false
		while IFS=' ' read -r foffset flength fpath <& 7
		do
			fend=`expr $foffset + $flength || :`
			if test $fend -gt $offset
			then
				not_yet_eof=true
				break
			fi
			echo "$foffset $flength $fpath" >& 5
		done
		test $foffset -le $offset && overlap
		echo "$offset $length $path" >& 5
		if $not_yet_eof
		then
			test $foffset -lt $end && overlap
			echo "$foffset $flength $fpath" >& 5
			while IFS=' ' read -r foffset flength fpath <& 7
			do
				echo "$foffset $flength $fpath" >& 5
			done
		fi
		release '='
		swap_src_dst
	else
		local ascending
		case $offset in
			'-'*)
				# * "-length"
				length=${offset#-}; offset=0
				chk_prefix "-$length"
				ascending=false
				;;
			'+'*)
				# * "+length"
				length=${offset#+}; offset=0
				chk_prefix "+$length"
				ascending=true
				;;
			*) syntax_error
		esac
		not_yet_eof=false
		offset=; fend=
		while IFS=' ' read -r foffset flength fpath
		do
			if
				test -n "$fend" \
				&& expr $fend + $length '<=' $foffset \
					> /dev/null
			then
				if $ascending
				then
					not_yet_eof=true
					break
				fi
				offset=$foffset
			fi
			fend=`expr $foffset + $flength || :`
		done < "$src"
		if $not_yet_eof
		then
			process_cmd "@$fend+$length=$path"
		elif $ascending
		then
			if IFS=' ' read -r foffset flength fpath < "$src"
			then
				process_cmd "@$foffset-$length=$path"
			else
				offset=$default_metadata_max_byte
				process_cmd "@$offset+$length=$path"
			fi
		elif test -n "$offset"
		then
			process_cmd "@$offset-$length=$path"
		else
			if IFS=' ' read -r foffset flength fpath < "$src"
			then
				process_cmd "@$foffset-$length=$path"
			else
				process_cmd "@$maxsize-$length=$path"
			fi
		fi
	fi
}

if test $# = 0
then
	while IFS= read -r cmd
	do
		process_cmd "$cmd"
	done
else
	for cmd
	do
		process_cmd "$cmd"
	done
fi

limit=$maxsize
{
	cat "$TD/header"
	while IFS=' ' read -r offset length path
	do
		test $offset" -lt $limit" && limit=$offset
		echo "@$offset+$length=$path"
	done
	cat "$TD/footer"
} < "$src" > "$dst"
metasize=`fsize "$dst"`
swap_src_dst

if $dry_run
then
	marker=`printf '%72s' x | tr -c u -`
	cat << EOF >& 2
All requested allocations have been processed without errors.

A dry run has been requested - *not* updating metadata area.

Here is the new metadata which would have been attempted to be updated
otherwise (which might have failed if there was not enough space
available in the metadata area):
$marker
EOF
	cat "$src"
	printf '%s\n' $marker >& 2
	exit
fi

if test -n "$metadata_backup_file"
then
	mdbk=$metadata_backup_file
else
	mdbk=$dst
fi
head -n $LNO < "$volume" | gzip -9c > "$mdbk"
bksize=`fsize "$mdbk"`
if test -n "$metadata_backup_file"
then
	needed=0
else
	needed=$bksize
fi
needed=`expr $needed + $metasize`

if test $needed -gt $limit
then
	missing=`expr $needed - $limit`
	msg="Insufficient space to update metadata! $needed bytes are required"
	msg="$msg, but only $limit bytes are available. $missing bytes are"
	msg="$msg therefore missing."
	if test -z "$metadata_backup_file" && test $missing -le $bksize
	then
		msg="$msg Consider using option -b to specify an external file"
		msg="$msg for backing up the old metadata. This would"
		msg="$msg temporarily save $bksize in the metadata area, which"
		msg="$msg would leave enough space for the update to succeed."
	fi
	die "$msg"
fi

if test -z "$metadata_backup_file"
then
	"$dir0"/offset_io write $bksize bytes '@' $metasize into "$volume" \
		< "$mdbk"
fi

"$dir0"/offset_io write $metasize bytes '@' 0 into "$volume" < "$src"
